'use strict';

var objGlobalPageConfig = false;
var objUserLoggedIn = {
		last_check: Math.floor((Date.now() /1000) + 120),
		in_progress: false,
};

function logToConsole(data) {
	console.log(data);
}

function doCreateSlidePanel(data)
{
	jQuery('body').toggleClass('aside-open aside-with-am-fade-and-slide-left').prepend('<div class="aside-backdrop am-fade slide-panel-backdrop"></div>');
}

function doRemoveSlidePanel(data)
{
	jQuery('body').toggleClass('aside-open aside-with-am-fade-and-slide-left').find('.slide-panel-backdrop').remove();
}

function doErrorAlert(h, c)
{
	var element_id = '#modal-angular-error';
	var element = jQuery(element_id);
	if (typeof h == 'undefined' || h == '')
	{
		h = 'An error occurred';
	}//end if
	
	element.find('.modal-title').html(h);
	element.find('.modal-body').html(c);
	jQuery(element_id).modal('show');
}//end function

function doMessageAlert(h, c)
{
	var element_id = '#modal-angular-message';
	var element = jQuery(element_id);
	if (typeof h == 'undefined' || h == '')
	{
		h = 'Take note';
	}//end if
	
	element.find('.modal-title').html(h);
	element.find('.modal-body').html(c);
	jQuery(element_id).modal('show');
}//end function

function doInfoAlert(h, c)
{
	var element_id = '#modal-angular-info';
	var element = jQuery(element_id);
	if (typeof h == 'undefined' || h == '')
	{
		h = 'Some information';
	}//end if
	
	element.find('.modal-title').html(h);
	element.find('.modal-body').html(c);
	jQuery(element_id).modal('show');
}//end function

/**
 * Formatter to assist formly to deal with checkbox checked options
 * @param val
 * @returns {Boolean}
 */
function setCheckboxValue(val) {
	if (val == 1 || val == "1")
	{	
		return true;
	}//end if

	return false;
}//end function

/**
 * Simple function to check if a string is an integer
 * @param value
 * @returns boolean
 */
function isNumeric(value) {
    return /^\d+$/.test(value);
}

function prepareFormFields(global_form_fields)
{
	//add validators
	jQuery.each(global_form_fields, function (i, objField) {
		if (objField.templateOptions.required == true)
		{
			var validator = {
					isRequiredFieldSet: function ($viewValue, $modelValue) {
						var val = $modelValue || $viewValue;
						if (val) {
							return true;
						}//end if

						return false;
					}
				};

			if (typeof objField.validators !== 'undefined' && objField.validators.length)
			{
				objField.validators.push(validator);
			} else {
				objField.validators = validator;
			}//end if
			
			objField.ngModelAttrs = {
				"required" : {value: "ng-required"}	
			};
			
			global_form_fields[i] = objField;
		}//end if

		//deal with checkboxes
		if (objField.templateOptions.type == 'checkbox')
		{
			objField.ngModelAttrs = {
					'"1"': {value: 'ng-true-value'},
					'"0"': {value: 'ng-false-value'},
			};
			
			global_form_fields[i] = objField;
		}//end if
	});
	
	return global_form_fields;
}//end function

function globalPageConfig(objData)
{
	if (objGlobalPageConfig == false && typeof objData !== "undefined")
	{
		objGlobalPageConfig = objData;
	}//end if
	
	if (objGlobalPageConfig == false && typeof global_page_config !== "undefined")
	{
		objGlobalPageConfig = global_page_config;
	}//end if
	
	return objGlobalPageConfig;
}//end function

function setupPaginationGlobal(scope, response) {
	if (typeof scope.objPageConfig == "undefined" || scope.objPageConfig == false)
	{
		scope.objPageConfig = {
			pagination: {
				tpages: []
			}	
		};
	}//end if
	
	if (typeof response.objData == 'undefined')
	{
		//no data has been set
		return scope;
	}//end if
	
	if (typeof response.objData.hypermedia == 'undefined' || typeof response.objData.hypermedia.pagination == "undefined")
	{
		scope.objPageConfig.pagination = {'tpages': []};
		return;
	}//end if
	
	if (typeof scope.objPageConfig.pagination == "undefined")
	{
		scope.objPageConfig.pagination = {'tpages': []};
	}//end if
	
	scope.objPageConfig.pagination = response.objData.hypermedia.pagination;
	scope.objPageConfig.pagination.tpages = [];
	for (var i = 0; i < response.objData.hypermedia.pagination.pages_total; i++)
	{
		scope.objPageConfig.pagination.tpages.push({i:1});
	}//end for
	
	return scope;
}//end function

/**
 * Custom handler for form errors generated by form validation on either the frontend or by the api
 * @param objFields - Passed by reference
 * @param objModel - Passed by reference
 * @param objFormErrors
 */
function handleFormlyFormValidationErrors(objFields, objModel, objFormErrors)
{
	objFields.objCustomErrors = Array();
	angular.forEach(objFormErrors, function (objErrors, element) {
		//find element in form
		angular.forEach(objFields, function (objField, i) {
			if (objField.key == element)
			{
				angular.forEach(objErrors, function (error, validator) {
					var validator_friendly = validator;
					objFields.objCustomErrors.push({message: objField.templateOptions.label + ': ' + error});
					delete(objFormErrors[element][validator]);
				});
			}//end if
		});
	});
	
	//add unknown errors
	angular.forEach(objFormErrors, function (objErrors, element) {
		angular.forEach(objErrors, function (error, validator) {
			objFields.objCustomErrors.push({message: 'Unknown Field (' + element + '): ' + error});
		});
	});
}//end function

/**
 * Helper function to check if user is logged in
 * Where user is not logged in, bootstrap login popup is used.
 */
function userIsLoggedin()
{
	if (objUserLoggedIn.in_progress == true)
	{
		return;
	}//end if
	
	//when was the last check? allow for 2 min seperation between calls
	var t = Math.floor(Date.now() /1000);
	if (t > objUserLoggedIn.last_check)
	{
		objUserLoggedIn.last_check = Math.floor((Date.now() /1000) + 120);
		objUserLoggedIn.in_progress = true;
	} else {
		return;
	}//end if
	
	jQuery.ajax({
		'url': '/user/login/ajax-user-logged-in',
	})
	.success(function (objData) {
		if (objData.error != 0)
		{
			if (objData.response == 0)
			{
				//trigger login popup
				userLoginAppendContent();
				objUserLoggedIn.in_progress = false;
				return false;
			}//end if
		}//end if
	})
	.fail(function () {		
		//redirect user to the normal login page
		window.location.href = '/user/login/logout';
	});
}//end function

/**
 * Append the required html to the current page to display popup
 */
function userLoginAppendContent()
{
	//load html
	jQuery('body').append(jQuery('<div></div>').attr('id', '_angular_user_login_box'));
	//request html
	jQuery('#_angular_user_login_box').load('/js/angular/helpers/partials/user_login_form.html', function () {
		//trigger popup
		jQuery('#user_login_modal').modal('show');
		//listen to form submit event
		jQuery('#user-login').submit(function (e) {
			e.preventDefault();
			var data = jQuery(this).serialize();
			doUserLogin(data);
		});
	});
}//end function

function doUserLogin(data)
{
	jQuery.ajax({
		'url': '/user/login/ajax-user-login',
		'method': 'post',
		'data': data
	})
	.success(function (objData) {
		if (objData.error == 1)
		{
			if (typeof objData.url != 'undefined')
			{
				window.location.href = objData.url;
			}//end if
		}//end if
		
		//remove the modal
		jQuery('#user_login_modal').modal('hide');
		
		//remove html from page
		jQuery('#_angular_user_login_box').remove();
		
		//clear the console
		console.API;

		if (typeof console._commandLineAPI !== 'undefined') {
		    console.API = console._commandLineAPI; //chrome
		} else if (typeof console._inspectorCommandLineAPI !== 'undefined') {
		    console.API = console._inspectorCommandLineAPI; //Safari
		} else if (typeof console.clear !== 'undefined') {
		    console.API = console;
		}//end if

		console.API.clear();
	})
	.fail(function () {
		//redirect user to the normal login page
		window.location.href = '/user/login/logout';
	});
}//end function