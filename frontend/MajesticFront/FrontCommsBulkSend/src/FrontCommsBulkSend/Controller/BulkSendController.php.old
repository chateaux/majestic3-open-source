<?php
namespace FrontCommsBulkSend\Controller;

use Zend\View\Model\JsonModel;
use FrontCore\Adapters\AbstractCoreActionController;

class BulkSendController extends AbstractCoreActionController
{
	/**
	 * Container for the Front Comms Bulk Send Model
	 * @var \FrontCommsBulkSend\Models\FrontCommsBulkSendModel
	 */
	private $model_front_comms_bulk_send;

	public function indexAction()
	{
		try {
			$objBulkSendRequests = $this->getFrontCommsBulkSendModel()->fetchBulkSendRequests($this->params()->fromQuery());
		} catch (\Exception $e) {
			$this->flashMessenger()->addErrorMessage($this->frontControllerErrorHelper()->formatErrors($e));
			return $this->redirect()->toRoute('home');
		}//end catch

		return array(
			"objBulkSendRequests" => $objBulkSendRequests,
			"model_front_comms_bulk_send" => $this->getFrontCommsBulkSendModel(),
		);
	}//end function

	public function reviewAction()
	{
		$id = $this->params()->fromRoute("id", "");
		if ($id == "")
		{
			//set error message
			$this->flashMessenger()->addErrorMessage("Bulk Send Request could not be loaded. ID is not set");

			//redirect to index page
			$this->redirect()->toRoute("front-comms-bulksend-admin");
		}//end if

		try {
			//load data
			$objBulkSendRequest = $this->getFrontCommsBulkSendModel()->fetchBulkSendRequest($id);
		} catch (\Exception $e) {
			$this->flashMessenger()->addErrorMessage($this->frontControllerErrorHelper()->formatErrors($e));
			return $this->redirect()->toRoute('home');
		}//end catch
			
		//load the form
		$form = $this->getFrontCommsBulkSendModel()->getBulkCommSendForm();
		$objFormData = $this->getServiceLocator()->get('FrontCommsBulkSend\Entities\FrontCommsBulkSendRequestEntity');
		$objFormData->set($objBulkSendRequest->get('arr_form_data'));
		if (is_array($objFormData->get('contact_created_start')))
		{
			$arr = $objFormData->get('contact_created_start');
			$objFormData->set('contact_created_start', $arr[0]);
		}//end if
		if (is_array($objFormData->get('contact_created_end')))
		{
			$arr = $objFormData->get('contact_created_end');
			$objFormData->set('contact_created_end', $arr[0]);
		}//end if
		$form->bind($objFormData);
		if ($form->has('submit'))
		{
			$form->remove('submit');
		}//end if

		$objJourney = $this->getFrontCommsBulkSendModel()->fetchJourney($objBulkSendRequest->get("fk_journey_id"));

		$request = $this->getRequest();
		if ($request->isPost())
		{
			/**
			 * Update the request
			 */
			if (strtolower($request->getPost("submit_update")) == "update")
			{
				try {
					$form->setData($request->getPost());
					if ($form->isValid())
					{
						$arr_data = (array) $request->getPost();
						//amend dates
						if (isset($arr_data['contact_created_start']))
						{
							if ($arr_data['contact_created_start'] == '')
							{
								unset($arr_data['contact_created_start']);
							} else {
								$arr_data['contact_created_start'] = date('c', strtotime($arr_data['contact_created_start']));
							}//end if
						}//end if

						if (isset($arr_data['contact_created_end']))
						{
							if ($arr_data['contact_created_end'] == '')
							{
								unset($arr_data['contact_created_end']);
							} else {
								$arr_data['contact_created_end'] = date('c', strtotime($arr_data['contact_created_end']));
							}//end if
						}//end if

						//update the request
						$objBulkSendRequest = $this->getFrontCommsBulkSendModel()->editBulkSendRequest($id, $arr_data);

						//set success message
						$this->flashMessenger()->addSuccessMessage("Bulk Send Request has been updated");
					} else {
						$this->flashMessenger()->addErrorMessage("Form could not be validated");
					}//end if
				} catch (\Exception $e) {
    				//set error message
    				$this->flashMessenger()->addErrorMessage($this->frontControllerErrorHelper()->formatErrors($e));
				}//end catch
			}//end if

			/**
			 * Request admin approval
			 */
			if (strtolower($request->getPost("request_approval")) == "request approval")
			{
				try {
					//submit request for approval
					$this->getFrontCommsBulkSendModel()->requestBulkSendRequestApproval($id);

					//set success message
					$this->flashMessenger()->addInfoMessage("Bulk Send Request has been submitted for Administrator Approval");

					//redirect back to the index
					return $this->redirect()->toRoute("front-comms-bulksend-admin");
				} catch (\Exception $e) {
    				//set error message
    				$this->flashMessenger()->addErrorMessage($this->frontControllerErrorHelper()->formatErrors($e));
				}//end catch
			}//end if

			/**
			 * Cancel the request
			 */
			if (strtolower($request->getPost("cancel_approval")) == "cancel approval")
			{
				try {
					//submit request for approval cancelation
					$this->getFrontCommsBulkSendModel()->requestBulkSendApprovalCancellation($id);

					$this->flashMessenger()->addInfoMessage("Approval cancelation request has been sent");
				} catch (\Exception $e) {
    				//set error message
    				$this->flashMessenger()->addErrorMessage($this->frontControllerErrorHelper()->formatErrors($e));
				}//end catch
			}//end if

			/**
			 * Cancel the request
			 */
			if (strtolower($request->getPost("delete_request")) == "cancel request")
			{
				try {
					//delete the request
					$this->getFrontCommsBulkSendModel()->deleteBulkSendRequest($id);

					//set success message
					$this->flashMessenger()->addSuccessMessage("Bulk Send Request has been cancelled");

					//redirect back to the index page
					return $this->redirect()->toRoute("front-comms-bulksend-admin");
				} catch (\Exception $e) {
					//set error message
					$this->flashMessenger()->addErrorMessage($this->frontControllerErrorHelper()->formatErrors($e));
				}//end catch
			}//end if
		}//end if

		/**
		 * Load possible required models
		 */
		$model_contact_status = $this->getServiceLocator()->get("FrontStatuses\Models\FrontContactStatusesModel");

		return array(
			"objBulkSendRequest" => $objBulkSendRequest,
			"objJourney" => $objJourney,
			"model_contact_status" => $model_contact_status,
			"model_front_comms_bulk_send" => $this->getFrontCommsBulkSendModel(),
			'form' => $form,
		);
	}//end function

	public function authorizeAction()
	{
		$id = $this->params()->fromRoute("id", "");
		if ($id == "")
		{
			//set error message
			$this->flashMessenger()->addErrorMessage("Bulk Send Request could not be loaded. ID is not set");

			//redirect to index page
			$this->redirect()->toRoute("front-comms-bulksend-admin");
		}//end if

		$request = $this->getRequest();
		if ($request->isPost())
		{
			try {
					//execute autorize request
					$objBulkSendRequest = $this->getFrontCommsBulkSendModel()->authorizeBulkSendRequest($id, (array) $request->getPost());

					//set success message
					$this->flashMessenger()->addSuccessMessage("Bulk Send Request has been approved");

					//redirect back to the index page
					return $this->redirect()->toRoute("front-comms-bulksend-admin");
				} catch (\Exception $e) {
    				//set error message
    				$this->flashMessenger()->addErrorMessage($this->frontControllerErrorHelper()->formatErrors($e));

					//reload data
					$objBulkSendRequest = $this->getFrontCommsBulkSendModel()->authorizeBulkSendRequest($id, array("time" => time()));
				}//end catch
		} else {
			//simulate authorization in order to get confirmation code
 			$objBulkSendRequest = $this->getFrontCommsBulkSendModel()->authorizeBulkSendRequest($id, array("time" => time()));
		}//end if

		return array(
			"objBulkSendRequest" => $objBulkSendRequest
		);
	}//end function

	/**
	 * Create an instance of the Front Comms Bulk Send Model using the Service Manager
	 * @return \FrontCommsBulkSend\Models\FrontCommsBulkSendModel
	 */
	private function getFrontCommsBulkSendModel()
	{
		if (!$this->model_front_comms_bulk_send)
		{
			$this->model_front_comms_bulk_send = $this->getServiceLocator()->get("FrontCommsBulkSend\Models\FrontCommsBulkSendModel");
		}//end if

		return $this->model_front_comms_bulk_send;
	}//end function
}//end class